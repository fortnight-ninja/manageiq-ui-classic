return unless %w(ems_cloud ems_infra ems_container ems_middleware ems_network ems_physical_infra).include?(controller_name)
prefix ||= "default"
ng_reqd_hostname ||= true
ng_reqd_api_port ||= true
ng_reqd_db_name ||= false
detection ||= false
ng_readonly_hostname ||= false
ng_readonly_api_port ||= false
ng_readonly_ems_container_security_protocol ||= false
ng_readonly_tls_verify ||= false
ng_readonly_tls_ca_certs ||= false
{}.merge("ng-if" => defined?(security_protocol_hide) ? false : true)
_haml_lint_puts_0 # div
{}.merge("ng-class" => "{'has-error': angularForm.#{prefix}_security_protocol.$invalid}", "ng-if"    => "emsCommonModel.emstype == 'openstack' || " +                              "emsCommonModel.emstype == 'openstack_infra' || " +                        "emsCommonModel.emstype == 'telefonica' || " +                             "emsCommonModel.emstype == 'telefonica_infra' || " +                       "emsCommonModel.emstype == 'nuage_network' || " +                          "emsCommonModel.emstype == 'redfish_ph_infra' || " +                       "(emsCommonModel.emstype == 'vmware_cloud' && '#{prefix}' === 'amqp') || " "emsCommonModel.emstype == 'scvmm' || " +                                  "emsCommonModel.ems_controller == 'ems_container' || " +                   "emsCommonModel.emstype === 'kubevirt' || " +                              "emsCommonModel.emstype == 'hawkular'")
_haml_lint_puts_1 # div
{}.merge("for" => "#{prefix}_security_protocol")
_haml_lint_puts_2 # label
_('Security Protocol')
_haml_lint_puts_3 # label/
{"ng-if" => "emsCommonModel.emstype == 'openstack' || emsCommonModel.emstype == 'openstack_infra' || emsCommonModel.emstype == 'vmware_cloud'"}
_haml_lint_puts_4 # div
prefix == "amqp" ? security_protocols = @amqp_security_protocols : security_protocols = @openstack_security_protocols
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]), "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "ng-required"                 => true, "ng-change"                   => "openstackSecurityProtocolChanged()", "selectpicker-for-select-tag" => "", "prefix"                      => prefix.to_s, "reset-validation-status"     => "#{prefix}_auth_status")
_haml_lint_puts_5 # div/
{"ng-if" => "emsCommonModel.emstype == 'telefonica' || emsCommonModel.emstype == 'telefonica_infra'"}
_haml_lint_puts_6 # div
prefix == "amqp" ? security_protocols = @amqp_security_protocols : security_protocols = @telefonica_security_protocols
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]), "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "ng-required"                 => true, "ng-change"                   => "telefonicaSecurityProtocolChanged()", "selectpicker-for-select-tag" => "", "prefix"                      => prefix.to_s, "reset-validation-status"     => "#{prefix}_auth_status")
_haml_lint_puts_7 # div/
{"ng-if" => "emsCommonModel.emstype == 'nuage_network'"}
_haml_lint_puts_8 # div
prefix == "amqp" ? security_protocols = @amqp_security_protocols : security_protocols = @nuage_security_protocols
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]), "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "required"                    => defined?(security_protocol_not_required) ? false : true, "selectpicker-for-select-tag" => "")
_haml_lint_puts_9 # div/
{"ng-if" => "emsCommonModel.emstype == 'scvmm'"}
_haml_lint_puts_10 # div
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + @scvmm_security_protocols, :disabled => ["<#{_('Choose')}>", nil]), "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "required"                    => "", "selectpicker-for-select-tag" => "", "prefix"                      => prefix.to_s, "reset-validation-status"     => "#{prefix}_auth_status")
_haml_lint_puts_11 # div/
{"ng-if" => "emsCommonModel.ems_controller == 'ems_container' || emsCommonModel.emstype === 'kubevirt'"}
_haml_lint_puts_12 # div
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + @container_security_protocols, :disabled => ["<#{_('Choose')}>", nil]), "disabled"                    => ng_readonly_ems_container_security_protocol, "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "required"                    => "", "selectpicker-for-select-tag" => "", "prefix"                      => prefix.to_s, "reset-validation-status"     => "#{prefix}_auth_status")
_haml_lint_puts_13 # div/
{"ng-if" => "emsCommonModel.emstype == 'hawkular'"}
_haml_lint_puts_14 # div
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + @hawkular_security_protocols, "disabled" => ["<#{_('Choose')}>", nil]), "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "required"                    => "", "ng-change"                   => "hawkularSecurityProtocolChanged()", "selectpicker-for-select-tag" => "", "prefix"                      => prefix.to_s, "reset-validation-status"     => "#{prefix}_auth_status")
_haml_lint_puts_15 # div/
{"ng-if" => "emsCommonModel.emstype == 'redfish_ph_infra'"}
_haml_lint_puts_16 # div
security_protocols = @redfish_security_protocols
select_tag("#{prefix}_security_protocol", options_for_select([["<#{_('Choose')}>", nil]] + security_protocols, :disabled => ["<#{_('Choose')}>", nil]), "ng-model"                    => "#{ng_model}.#{prefix}_security_protocol", "checkchange"                 => "", "required"                    => defined?(security_protocol_not_required) ? false : true, "selectpicker-for-select-tag" => "")
_haml_lint_puts_17 # div/
_haml_lint_puts_18 # div/
_haml_lint_puts_19 # div/
{}.merge("ng-if" => defined?(hostname_hide) ? false : true)
_haml_lint_puts_20 # div
{}.merge("ng-class" => "{'has-error': angularForm.#{prefix}_hostname.$invalid}")
_haml_lint_puts_21 # div
{}.merge("for" => "#{prefix}_hostname")
_haml_lint_puts_22 # label
_('Hostname (or IPv4 or IPv6 address)')
_haml_lint_puts_23 # label/
_haml_lint_puts_24 # div
{}.merge("type"                    => "text", "id"                      => "#{prefix}_hostname", "name"                    => "#{prefix}_hostname", "ng-model"                => "#{ng_model}.#{prefix}_hostname", "ng-readonly"             => ng_readonly_hostname, "maxlength"               => ViewHelper::MAX_NAME_LEN.to_s, "ng-required"             => ng_reqd_hostname.to_s, "ng-trim"                 => false, "detect-spaces"           => "", "hostname-validation"     => "", "checkchange"             => "", "prefix"                  => prefix.to_s, "reset-validation-status" => "#{prefix}_auth_status")
_haml_lint_puts_25 # input
_haml_lint_puts_26 # input/
{}.merge("ng-show" => "angularForm.#{prefix}_hostname.$error.required")
_haml_lint_puts_27 # span
_("Required")
_haml_lint_puts_28 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_hostname.$error.detectedSpaces")
_haml_lint_puts_29 # span
_("Spaces are prohibited")
_haml_lint_puts_30 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_hostname.$error.hostnameValidation")
_haml_lint_puts_31 # span
_("Wrong hostname format")
_haml_lint_puts_32 # span/
_haml_lint_puts_33 # div/
detect = "detectClicked({target: '.detect_button'})"
_haml_lint_puts_34 # span
{}.merge("ng-if" => detection ? 'true' : 'false', :name            => _("Detect"), "on-click"       => detect, :enabled         => "isDetectionEnabled()", "disabled-title" => _("Required information missing"), "enabled-title"  => _("Detect Endpoint"), :xs              => 'true', :primary         => 'true')
_haml_lint_puts_35 # miq-button
_haml_lint_puts_36 # miq-button/
_haml_lint_puts_37 # span/
_haml_lint_puts_38 # div/
_haml_lint_puts_39 # div/
{}.merge("ng-if" => (defined?(hostname_hide) ? false : true) && (defined?(fallback_hostnames) ? fallback_hostnames : false))
_haml_lint_puts_40 # div
{}.merge("ng-class" => "{'has-error': angularForm.#{prefix}_fallback_hostname1.$invalid}")
_haml_lint_puts_41 # div
{}.merge("for" => "#{prefix}_fallback_hostname1")
_haml_lint_puts_42 # label
_('Fallback Hostname 1')
_haml_lint_puts_43 # label/
_haml_lint_puts_44 # div
{}.merge("type"                    => "text", "id"                      => "#{prefix}_fallback_hostname1", "name"                    => "#{prefix}_fallback_hostname1", "ng-model"                => "#{ng_model}.#{prefix}_fallback_hostname1", "maxlength"               => ViewHelper::MAX_NAME_LEN.to_s, "ng-required"             => "#{ng_model}.#{prefix}_fallback_hostname2", "ng-trim"                 => false, "detect-spaces"           => "", "checkchange"             => "", "prefix"                  => prefix.to_s, "reset-validation-status" => "#{prefix}_auth_status", "placeholder"             => _("Hostname or IPv4 or IPv6 address"))
_haml_lint_puts_45 # input
_haml_lint_puts_46 # input/
{}.merge("ng-show" => "angularForm.#{prefix}_fallback_hostname1.$error.required")
_haml_lint_puts_47 # span
_("Required")
_haml_lint_puts_48 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_fallback_hostname1.$error.detectedSpaces")
_haml_lint_puts_49 # span
_("Spaces are prohibited")
_haml_lint_puts_50 # span/
_haml_lint_puts_51 # div/
_haml_lint_puts_52 # div/
_haml_lint_puts_53 # div/
{}.merge("ng-if" => (defined?(hostname_hide) ? false : true) && (defined?(fallback_hostnames) ? fallback_hostnames : false))
_haml_lint_puts_54 # div
{}.merge("ng-class" => "{'has-error': angularForm.#{prefix}_fallback_hostname2.$invalid}")
_haml_lint_puts_55 # div
{}.merge("for" => "#{prefix}_fallback_hostname2")
_haml_lint_puts_56 # label
_('Fallback Hostname 2')
_haml_lint_puts_57 # label/
_haml_lint_puts_58 # div
{}.merge("type"                    => "text", "id"                      => "#{prefix}_fallback_hostname2", "name"                    => "#{prefix}_fallback_hostname2", "ng-model"                => "#{ng_model}.#{prefix}_fallback_hostname2", "maxlength"               => ViewHelper::MAX_NAME_LEN.to_s, "ng-required"             => "#{ng_model}.#{prefix}_fallback_hostname1", "ng-trim"                 => false, "detect-spaces"           => "", "checkchange"             => "", "prefix"                  => prefix.to_s, "reset-validation-status" => "#{prefix}_auth_status", "placeholder"             => _("Hostname or IPv4 or IPv6 address"))
_haml_lint_puts_59 # input
_haml_lint_puts_60 # input/
{}.merge("ng-show" => "angularForm.#{prefix}_fallback_hostname2.$error.required")
_haml_lint_puts_61 # span
_("Required")
_haml_lint_puts_62 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_fallback_hostname2.$error.detectedSpaces")
_haml_lint_puts_63 # span
_("Spaces are prohibited")
_haml_lint_puts_64 # span/
_haml_lint_puts_65 # div/
_haml_lint_puts_66 # div/
_haml_lint_puts_67 # div/
{}.merge("ng-if" => defined?(apiport_hide) ? false : true)
_haml_lint_puts_68 # div
{}.merge("ng-class" => "{'has-error': angularForm.#{prefix}_api_port.$invalid}", "ng-if" => "emsCommonModel.emstype == 'openstack'              || " + "emsCommonModel.emstype == 'openstack_infra'        || " + "emsCommonModel.emstype == 'telefonica'             || " + "emsCommonModel.emstype == 'telefonica_infra'       || " + "emsCommonModel.emstype == 'nuage_network'          || " + "emsCommonModel.emstype == 'rhevm'                  || " + "emsCommonModel.emstype === 'kubevirt'              || " + "emsCommonModel.emstype == 'vmware_cloud'           || " + "emsCommonModel.emstype == 'hawkular'               || " + "emsCommonModel.emstype == 'lenovo_ph_infra'        || " + "emsCommonModel.emstype == 'redfish_ph_infra'       || " + "emsCommonModel.ems_controller == 'ems_container'")
_haml_lint_puts_69 # div
{}.merge("for" => "#{prefix}_api_port")
_haml_lint_puts_70 # label
_('API Port')
_haml_lint_puts_71 # label/
_haml_lint_puts_72 # div
{}.merge("type"                        => "text", "id"                          => "#{prefix}_api_port", "name"                        => "#{prefix}_api_port", "ng-model"                    => "#{ng_model}.#{prefix}_api_port", "maxlength"                   => 15, "ng-required"                 => ng_reqd_api_port.to_s, "ng-readonly"                 => ng_readonly_api_port, "checkchange"                 => "", "ng-trim"                     => false, "detect-spaces"               => "", "prefix"                      => prefix.to_s, "reset-validation-depends-on" => %w(hawkular metrics).include?(prefix) ? "#{prefix}_hostname" : "", "reset-validation-status"     => "#{prefix}_auth_status", "pattern"                     => "^[1-9]\\d*$")
_haml_lint_puts_73 # input
_haml_lint_puts_74 # input/
{}.merge("ng-show" => "angularForm.#{prefix}_api_port.$error.pattern")
_haml_lint_puts_75 # span
_("Must be a number (greater than 0)")
_haml_lint_puts_76 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_api_port.$error.required")
_haml_lint_puts_77 # span
_("Required")
_haml_lint_puts_78 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_api_port.$error.detectedSpaces")
_haml_lint_puts_79 # span
_("Spaces are prohibited")
_haml_lint_puts_80 # span/
_haml_lint_puts_81 # div/
_haml_lint_puts_82 # div/
_haml_lint_puts_83 # div/
{}.merge("ng-if" => defined?(database_name_show) ? true : false)
_haml_lint_puts_84 # div
{}.merge("ng-class" => "{'has-error': angularForm.#{prefix}_database_name.$invalid}", "ng-if" => "emsCommonModel.emstype == 'rhevm'")
_haml_lint_puts_85 # div
{}.merge("for" => "#{prefix}_database_name")
_haml_lint_puts_86 # label
_('Database Name')
_haml_lint_puts_87 # label/
_haml_lint_puts_88 # div
{}.merge("type"          => "text", "id"            => "#{prefix}_database_name", "name"          => "#{prefix}_database_name", "ng-model"      => "#{ng_model}.#{prefix}_database_name", "maxlength"     => 40, "ng-required"   => ng_reqd_db_name.to_s, "checkchange"   => "", "ng-trim"       => false, "detect-spaces" => "")
_haml_lint_puts_89 # input
_haml_lint_puts_90 # input/
{}.merge("ng-show" => "angularForm.#{prefix}_database_name.$error.required")
_haml_lint_puts_91 # span
_("Required")
_haml_lint_puts_92 # span/
{}.merge("ng-show" => "angularForm.#{prefix}_database_name.$error.detectedSpaces")
_haml_lint_puts_93 # span
_("Spaces are prohibited")
_haml_lint_puts_94 # span/
_haml_lint_puts_95 # div/
_haml_lint_puts_96 # div/
_haml_lint_puts_97 # div/
{}.merge("ng-if" => defined?(tls_verify_hide) ? false : true)
_haml_lint_puts_98 # div
{"ng-if"=> "emsCommonModel.emstype == 'rhevm'"}
_haml_lint_puts_99 # div
{}.merge("for" => "#{prefix}_tls_verify")
_haml_lint_puts_100 # label
_('Verify TLS Certificates')
_haml_lint_puts_101 # label/
_haml_lint_puts_102 # div
{}.merge("type"            => "checkbox", "id"              => "#{prefix}_tls_verify", "name"            => "#{prefix}_tls_verify", "ng-readonly"     => ng_readonly_tls_verify, "bs-switch"       => "", "switch-on-text"  => _("Yes"), "switch-off-text" => _("No"), "ng-true-value"   => "true", "ng-false-value"  => "false", "ng-model"        => "#{ng_model}.#{prefix}_tls_verify", "prefix"          => prefix.to_s)
_haml_lint_puts_103 # input
_haml_lint_puts_104 # input/
_haml_lint_puts_105 # div/
_haml_lint_puts_106 # div/
_haml_lint_puts_107 # div/
{}.merge("ng-if" => defined?(tls_ca_certs_hide) ? false : true)
_haml_lint_puts_108 # div
{}.merge("ng-if"=> "emsCommonModel.emstype == 'rhevm' || " +                                             "((emsCommonModel.ems_controller == 'ems_container' || " +                            " emsCommonModel.emstype === 'kubevirt') && " +                                       " emsCommonModel.#{prefix}_security_protocol == 'ssl-with-validation-custom-ca') || " "(emsCommonModel.emstype == 'hawkular' && " +                                         " emsCommonModel.#{prefix}_security_protocol == 'ssl-with-validation-custom-ca')")
_haml_lint_puts_109 # div
{}.merge("for" => "#{prefix}_tls_ca_certs")
_haml_lint_puts_110 # label
_('Trusted CA Certificates')
_haml_lint_puts_111 # label/
_haml_lint_puts_112 # div
{}.merge("id"          => "#{prefix}_tls_ca_certs", "name"        => "#{prefix}_tls_ca_certs", "ng-model"    => "#{ng_model}.#{prefix}_tls_ca_certs", "ng-disabled" => "emsCommonModel.emstype == 'rhevm' && !#{ng_model}.#{prefix}_tls_verify", "ng-readonly" => ng_readonly_tls_ca_certs, "ng-required" => false, "ng-trim"     => false, "prefix"      => prefix.to_s, "reset-validation-status" => "#{prefix}_auth_status")
_haml_lint_puts_113 # textarea
_haml_lint_puts_114 # textarea/
_haml_lint_puts_115 # span
_("Paste here the trusted CA certificates, in PEM format.")
_haml_lint_puts_116 # span/
_haml_lint_puts_117 # div/
_haml_lint_puts_118 # div/
_haml_lint_puts_119 # div/
{"ng-class" => "{'has-error': angularForm.realm.$invalid}", "ng-if" => "emsCommonModel.emstype == 'scvmm' && emsCommonModel.default_security_protocol == 'kerberos'"}
_haml_lint_puts_120 # div
{"for" => "realm"}
_haml_lint_puts_121 # label
_('Realm')
_haml_lint_puts_122 # label/
_haml_lint_puts_123 # div
{}.merge("type"          => "text", "id"            => "realm", "name"          => "realm", "ng-model"      => "emsCommonModel.realm", "maxlength"     => ViewHelper::MAX_NAME_LEN.to_s, "required"      => "", "checkchange"   => "", "auto-focus"    => "", "ng-trim"       => false, "detect-spaces" => "")
_haml_lint_puts_124 # input
_haml_lint_puts_125 # input/
{"ng-show" => "angularForm.realm.$error.required"}
_haml_lint_puts_126 # span
_("Required")
_haml_lint_puts_127 # span/
{"ng-show" => "angularForm.realm.$error.detectedSpaces"}
_haml_lint_puts_128 # span
_("Spaces are prohibited")
_haml_lint_puts_129 # span/
_haml_lint_puts_130 # div/
_haml_lint_puts_131 # div/